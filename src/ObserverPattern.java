public class ObserverPattern {
    /*
    ObserverPattern
        [부제]
            - 객체들에게 연락망을 돌립시다.
        [개념]
            - 옵저버 패턴(observer pattern)은 객체의 상태 변화를 관찰하는 관찰자들,
              즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다.
              주로 분산 이벤트 핸들링 시스템을 구현하는 데 사용된다. 발행/구독 모델로 알려져 있기도 하다.

            - 어떤 객체의 상태가 변할 떄 그와 연관된 객체들에게 알림을 보내는 다자인 패턴이다.

            - 모든 크루(학생)들은 코치가 하는 일들을 모두 notify(알림)받아야 한다.
              즉, 코치가 "밥을 먹는다"면 모든 크루들은 코치가 밥을 먹었다는 것을 알아야 한다.
              코치가 "농땡이를 친다"면 모든 크루들은 코치가 농떙이를 치는 것을 알아야 한다.


        [예제]
            - https://pjh3749.tistory.com/266

        [설명]
            - Observable는 클래스이고 정보를 제공한다.
            - Observers는 인터페이스이고 정보를 제공받는다.

            만약 코치의 정보를 제공한다면 Observable 클래스를 상속받아서 구현한다.
            르윈, 티버, 제이는 정보를 제공받고 싶다면 Observers의 인터페이스를 구현하여 정보를 제공 받는다.


     */
}

