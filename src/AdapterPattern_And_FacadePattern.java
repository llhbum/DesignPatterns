public class AdapterPattern_And_FacadePattern {
    /*
    AdapterPattern
        [개념]
            - 한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환한다.
            - 어댑터를 이용하며, 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

        [사용방법]
            - 1. 클라이언트에서 타겟 인터페이스를 사용하여 메소드를 호출함으로써 어댑터에 요청을 한다.
            - 2. 어댑터에서는 어댑터 인터페이스를 사용하여 그 요청을 어댑터에 대한 하나 이상의 메소드 호출로 변환한다.
            - 3. 클라이언트에서는 호출 결과를 받지만 중안에 어댑터가 있는지 전혀 알지 못한다.

        [종류]
            - 1. 객체 어댑터
            - 2. 클래스 어댑터
                - 클래스 어댑터는 다중상속을 사용하지만 자바에서는 다중상속이 허용되지 않는다.
                  그래도 구현을 할 수있는데 객체 어댑터와 크게 다르지 않다.
    FacadePattern
        [개념]
            - 퍼사드 패턴을 쓰면 휠씬 쓰기 쉬운 인터페이스를 제공하는 퍼사드 클래스를 구현함으로써
              복잡한 시스템을 휠씬 쉽게 사용할 수 있다.
            - 어떤 서브시스템의 일련의 인터페이스에 대한 통합된 인터페이스를 제공합니다.
              퍼사드에서 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할 수 있습니다.

     */
}
